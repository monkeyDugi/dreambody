type Query {
    userInfo: UserInfo
    genders: [Gender]
    activities: [Activity]
    goals: [Goal]
    summary(requestSummary: RequestSummary): Summary
}

type Mutation {
    saveUserInfo(requestUserInfo: RequestUserInfo): UserInfo
}

input RequestSummary {
    registrationDate: String
    mealType: Int
}

input RequestUserInfo {
    currentWeight: Int
    goalWeight: Int
    height: Int
    dateOfBirth: String
    gender: Int
    goal: Int
    activity: Int
}

type User {
    id: Int!
    name: String!
    email: String!
    emailVerified: Boolean!
    provider: String!
    providerId: String!
}

type UserInfo {
    id: Int!
    currentWeight: Int!
    goalWeight: Int!
    height: Int!
    dateOfBirth: String!
    dailyIntakeCalorie: Int!
    user: User
    gender: Gender
    goal: Goal
    activity: Activity
    registrationDate: String!
}

type Gender {
    id: Int!
    gender: String!
}

type Goal {
    id: Int!
    goal: String!
}

type Activity {
    id: Int!
    activity: String!
    volume: Float!
}

type Summary {
    intakeCalorie: Int!
    goalCalorie: Int!
    intakeCarbohydrate: Int!
    goalCarbohydrate: Int!
    intakeProtein: Int!
    goalProtein: Int!
    intakeFat: Int!
    goalFat: Int!
}
