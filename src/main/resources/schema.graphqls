type Query {
    userInfo: UserInfo
    userFoodMapping(mealType1: EMealType): [UserFoodMappingResponse]
    summary(requestSummary: RequestSummary): Summary
}

type Mutation {
    saveUserInfo(userInfoRequest: UserInfoRequest): UserInfo
    saveUserFoodMapping(foodInfoRequest: FoodInfoRequest): Int
}

input RequestSummary {
    registrationDate: String
    mealType1: EMealType
}

input UserInfoRequest {
    currentWeight: Int
    goalWeight: Int
    height: Int
    dateOfBirth: String
    genderType: EGender
    goalType: EGoal
    activityType: EActivity
}

input FoodInfoRequest {
    code: String
    name: String
    protein: Float
    fat: Float
    carbohydrate: Float
    calorie: Float
    registrationDate: String
    foodInfo: Int
    user: Int
    mealType1: EMealType
    quantity: Int
}

type User {
    id: Int!
    name: String!
    email: String!
    emailVerified: Boolean!
    provider: String!
    providerId: String!
}

type UserInfo {
    id: Int!
    currentWeight: Int!
    goalWeight: Int!
    height: Int!
    dateOfBirth: String!
    dailyIntakeCalorie: Int!
    user: User
    genderType: EGender
    goalType: EGoal
    activityType: EActivity
    registrationDate: String!
}

type Summary {
    intakeCalorie: Int!
    goalCalorie: Int!
    intakeCarbohydrate: Int!
    goalCarbohydrate: Int!
    intakeProtein: Int!
    goalProtein: Int!
    intakeFat: Int!
    goalFat: Int!
}

type UserFoodMappingResponse {
    id: Int!
    quantity: Int!
    registrationDate: String!
    mealType1: EMealType!
    foodInfo: FoodInfo!
    User: User!
}

type FoodInfo {
    id: Int!
    code: String!
    name: String!
    protein: Float!
    fat: Float!
    carbohydrate: Float!
    calorie: Float!
}

enum EGender {
    MALE
    FEMALE
}

enum EGoal {
    WEIGHT_LOSS
    WEIGHT_GAIN
    WEIGHT_RETENTION
}

enum EActivity {
    IN_ACTIVE
    LITTLE_ACTIVE
    NORMAL_ACTIVE
    FAIRLY_ACTIVE
    VERY_ACTIVE
}

enum EMealType {
    BREAKFAST
    LUNCH
    DINNER
    DESSERT
}